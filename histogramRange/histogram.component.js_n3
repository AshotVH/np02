'use strict';
angular.module('histogramRange', ['n3-line-chart']).component('histogramRange', {
    templateUrl: 'histogramRange/histogramRange.template.html',
    controller: ['$routeParams', '$window', '$http', '$interval',
        function histogramRangeController($routeParams, $window, $http, $interval) {
            this.elemId = $routeParams.elemId;
            if ($routeParams.days != null) {
                console.log(this.days);
                this.days = $routeParams.days;
            } else {
                this.days = 1;
            }
            this.pageTitle = this.elemId;
            this.natalie = 1;
            this.width = 90;
            this.respdata = [];
            var self = this;
            this.data;
            this.labels = [];
            this.values = [];
            this.options;
            var fundays = this.days;

            this.dayChanger = function (funcdays) {
                $window.location.href = "#!/histogramRange/" + this.elemId + "/" + funcdays;
                console.log($window.location.href);
            };

            console.log(fundays);
            this.reload = function () {
                $window.location.reload();
            };
            $http.get("php-db-conn/histogramRange.conn.php?elemId=" + self.elemId + "&days=" + fundays).then(function onSuccess(response) {
                if (response != undefined && typeof response == "object") {
                    var title = self.elemId;
                    self.respdata = response.data.records;

                    var rdc = self.respdata.length;
                    if (rdc >= 10000) {
                        for (var i= 0; i < rdc; i+=10) {
                            self.labels.push(moment((self.respdata[i].TimeStamp), "DD-MMM-YYYY hh.mm.ss.SSSSSSSSS A").add(2, 'hours'));
                            //self.labels.push(self.respdata[i].TimeStamp);
                            self.values.push(self.respdata[i].ExactValue);
                        }
                    } else {
                        for (var i in self.respdata) {
                            self.labels.push(moment((self.respdata[i].TimeStamp), "DD-MMM-YYYY hh.mm.ss.SSSSSSSSS A").add(2, 'hours'));
                            //self.labels.push(self.respdata[i].TimeStamp);
                            self.values.push(self.respdata[i].ExactValue);
                        }
                    }

                        self.data = {
                            dataset0: [
                                {x: self.labels, y: self.values}
                            ]
                        };


                    self.options = {
                        series: [
                            {
                                axis: "y",
                                dataset: "dataset0",
                                key: "y",
                                label: "An area series",
                                color: "#1f77b4",
                                type: ['line'],
                                id: 'mySeries0'
                            }
                        ],
                        axes: {x: {key: "x", type: "date"}}
                    };

                    console.log(self.data.dataset0);


                } else {
                    self.dayChanger(3);
                }
            }).catch(function onError(data) {
                self.dayChanger(3);
            });

            $interval(this.reload, 60000);
        }
    ]
});